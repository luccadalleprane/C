# -*- coding: utf-8 -*-
"""Cópia de RM - Aula 02 - Parte 01 e 02 - Fundamentos da Teoria de Controle e da Simulação de Sistemas Dinâmicos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ONDSmfyYt1Ycp9kfAla3g43biqibeHzG

# **Robótica Móvel - Aula 02 - Fundamentos da Teoria de Controle e da Simulação de Sistemas Dinâmicos**

* Clique no Play ao lado esquerdo das células de código para rodar;
* Adicione células de código quando julgar necessário;
* O código está escrito em Python usando as bibliotecas:
  * [numpy](http://www.numpy.org/): para manipulação de dados numéricos, vetores, matrizes, álgebra linear e outras funções matemáticas;
  * [matplotlib](https://matplotlib.org/index.html): para geração dos gráficos;
* **Atenção:** A linguagem de programação Python é sensível à indentação;

# **Exercício de Programação 01**
###**Simulação de um relógio discreto**
"""

import matplotlib.pyplot as plt #Importa biblioteca matplotlib (geração de gráficos)
import numpy as np # Importa biblioteca numpy (manipulação de dados numéricos)

x = np.zeros(10) # Inicializa vetor de 10 posições nulas
t = np.arange(0, 10, 1) #Inicializa vetor de 10 posições com incremento 1 [0, 1, 2, ..., 8, 9]

for k in range(0, 9): #k>=0; k<9; k++
    x[k+1] = 2 * x[k] + 1  #Insira a modificação do código aqui

# https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.stem.html
markers, stemlines, baseline = plt.stem(t, x, use_line_collection= True) #Plota com característica discreta
plt.setp(baseline, visible=False) #Retira o baseline

plt.xlabel('k') #label do eixo x
plt.ylabel('x') #label do eixo y
plt.title('Clock') #título do gráfico
plt.axis([-0.5, 10, -0.5, 10]) #ajusta eixos
plt.grid(True) #liga grid
plt.show() #mostra imagem no console

"""# **Exercício de Fixação 01**
###**Simulação de um relógio discreto**

* Modifique o código do exemplo anterior para plotar a função:
  * $x_{k+1} = 2 \ x_k +1$
* Ajuste os eixos do gráfico exibir corretamente o resultado.

# **Exercício de Programação 02**
###**Simulação de um relógio analógico**

* Execute o código e compreenda o  resultado de saída;
"""

import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.0, 10.0, 0.001) #Inicializa vetor t = [0s até 9.999s] com intervalo infinitesimal dt = 1ms
x_t = t;

plt.plot(t, x_t) #Plota com característica contínua
plt.xlabel('t') #label do eixo x
plt.ylabel('x(t)') #label do eixo y
plt.title('Clock - Contínuo') #título do gráfico
plt.axis([0, 10, 0, 10]) #ajusta eixos
plt.grid(True) #liga grid
plt.show() #mostra imagem no console

"""# **Exercício de Fixação 02**
###**Simulação de um relógio analógico**

* Qual a diferença deste código em relação ao exemplo do relógio digital?
* Modifique o código para que seja exibida a função $x(t)=10 \ \sin(2 t)$;
  * Saiba que a função seno no Python pode ser invocada através da biblioteca numpy como ***np.sin()***;

* Ajuste os eixos do gráfico exibir corretamente o resultado;
* Volte às notas de aula e faça a reflexão sugerida.

"""